import content from './content';
import params from '../json/headerParams.json';
import debounce from 'lodash.debounce';
import API from './services/api';
import LocalStorageUtils from './services/localStorage';

// üìå –ò–º–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç header

export default {
    _parentNode: null,
    _navPagesRef: null,
    _inputRef: null,
    _libWrapperRef: null,
    _messageHeader: null,
    _tplName: params.TPL_NAMES.home,
    _currTpl: null,

    linkParent(selector) {
        this._parentNode = document.querySelector(selector);
    },

    render() {
        try {
            this.loadCurrTemplate();
            this.renderCurrTplMarkup();

            this._linkRefs();
            this._bindEvents();
        } catch (err) {
            this._errorHandler(err);
        }
    },

    loadCurrTemplate() {
        this._currTpl = require('../templates/' +
            this._tplName +
            '.header.hbs');
    },

    renderCurrTplMarkup() {
        this._parentNode.innerHTML = this._currTpl();
    },

    _errorHandler(err) {
        console.log(`${err.name}: ${err.message}`);
    },

    _linkRefs() {
        this._navPagesRef = this._parentNode.querySelector('#nav-pages');

        switch (this._tplName) {
            case params.TPL_NAMES.home:
                this._inputRef = this._parentNode.querySelector(
                    '#search-input',
                );
                this._messageHeader = this._parentNode.querySelector(
                    '.message-header',
                );
                break;
            case params.TPL_NAMES.library:
                this._libWrapperRef = this._parentNode.querySelector(
                    '#library-wrapper',
                );
                break;
        }
    },

    _bindEvents() {
        this._navPagesRef.addEventListener(
            'click',
            this._onNavPagesClick.bind(this),
        );

        switch (this._tplName) {
            case params.TPL_NAMES.home:
                this._inputRef.addEventListener(
                    'input',
                    debounce(this.onInput, 500).bind(this),
                );
                break;
            case params.TPL_NAMES.library:
                this._libWrapperRef.addEventListener(
                    'click',
                    this.onLibraryBtnsClick.bind(this),
                );
                break;
        }
    },

    _onNavPagesClick(e) {
        if (e.target.tagName !== 'A') {
            return;
        }

        this._tplName = params.TPL_NAMES[e.target.dataset.tpl];
        this.render();
    },

    onInput(e) {
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç–µ content
        if (e.target.value.trim()) {
            // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–≤–µ–¥–µ–Ω–æ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
            content.getIncomingData = getIncDataOverride;
        } else {
            // –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ, –∫–∞–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
            content.getIncomingData = getIncDataOriginal;
        }
        // —É–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        this._messageHeader.classList.add('is-hidden');

        content.page = 1;
        content.render();

        // –ó–∞–º–µ–Ω—è—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–ø–æ–∏—Å–∫)
        function getIncDataOverride() {
            return API.searchMovies({ query: e.target.value, page: this.page });
        }
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–ø–æ–ø—É—è—Ä–Ω—ã–µ)
        function getIncDataOriginal() {
            return API.getTrending({ page: this.page });
        }
    },

    // —É–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    showError() {
        this._messageHeader.classList.remove('is-hidden');
    },

    onLibraryBtnsClick(e) {
        if (e.target.tagName !== 'BUTTON') {
            return;
        }

        switch (e.target.dataset.action) {
            case 'watched':
                content.getIncomingData = getIncDataOvrWatched;
                break;
            case 'queue':
                content.getIncomingData = getIncDataOvrQueue;
                break;
        }

        content.page = 1;
        content.render();

        function getIncDataOvrWatched() {
            const lsUtils = new LocalStorageUtils();
            const watchedList = lsUtils.getMovies(lsUtils.listNames.watched);

            const indexFrom = (this.page - 1) * 20;
            const results = watchedList.slice(indexFrom, indexFrom + 20);
            const total_pages = Math.ceil(watchedList.length / 20);

            return Promise.resolve({ results, total_pages });
        }
        function getIncDataOvrQueue() {
            const lsUtils = new LocalStorageUtils();
            const watchedList = lsUtils.getMovies(lsUtils.listNames.queued);

            const indexFrom = (this.page - 1) * 20;
            const results = watchedList.slice(indexFrom, indexFrom + 20);
            const total_pages = Math.ceil(watchedList.length / 20);

            return Promise.resolve({ results, total_pages });
        }
    },
};
